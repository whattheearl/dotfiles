#! /usr/bin/env bash

# INFO: dev-cli
alias a="dev action $@"
alias bff="dev run bff";
alias client="dev run client";
alias ai="dev ai claude $@"
alias d="dev deploy $@"
alias format="dev format $@"
alias github="dev browse github $@"
alias lint="dev run lint $@"
alias pr="dev pr $@"
alias r="dev run $@"
alias web="dev browse web $@"

# INFO: tool
alias eslint="dev lint"
alias ff="firefox $@"
alias lg="lazygit"
alias prettier="dev format"
alias v="nvim $@"

alias cp-editconfig="cp ~/wte/dotfiles/templates/.editorconfig ."
alias cp-make="cp ~/wte/dotfiles/templates/Makefile ."
alias cp-npmrc="cp ~/wte/dotfiles/templates/.npmrc ."
alias cp-nugetconfig="cp ~/wte/dotfiles/templates/NuGet.config ."
alias cp-prettierrc="cp ~/wte/dotfiles/templates/.prettierrc ."

# INFO: tcp
function bs() { docker compose -f ~/tyl/tcp-branding-api/docker-compose.yaml $@ }
function csd() { docker compose -f ~/tyl/tcp-community-service-dev-compose/docker-compose.yml -f ~/tyl/tcp-community-service-dev-compose/infrastructure/docker-compose.yml $@ }
function ac() { docker compose -f ~/tyl/tcp-admincenter/docker-compose.yml $@ }
function tcp() { docker compose -f ~/tyl/platform-dev-environment-compose/docker-compose.yml $@ }
function tcpm() { make -C ~/tyl/platform-dev-environment-compose/ $@ }
function tid() { docker compose -f ~/tyl/platform-dev-environment-compose/docker-compose.yml -f ~/tyl/platform-dev-environment-compose/docker-compose.tid.yml $@ }

# INFO: envars
export MANPAGER='nvim +Man!'
export DOTNET_CLI_TELEMETRY_OPTOUT='true'
export BROWSER=firefox
export NVM_DIR=${HOME}/.nvm
export EDITOR=nvim
export PATH=$PATH:$HOME/.config/homebrew/bin
export PATH=$PATH:/opt/homebrew/bin
export PATH=$HOME/tyl/dev-cli/bin:$PATH
export PATH=$PATH:/opt/nvim-linux64/bin
export PATH=$PATH:$HOME/.cargo/env
export PATH=$PATH:/usr/local/go/bin
export PATH=$PATH:$HOME/go/bin
export PATH=$PATH:$HOME/.deno/bin
export PATH=$PATH:$HOME/.dotnet/tools
# export PATH=$PATH:$HOME/.dotnet/tools/kiota
# export PATH=$PATH:/home/jon/.dotnet/tools
export PATH=$PATH:/opt/nvim-linux64/bin
export PATH=$PATH:$HOME/wte/dotfiles/scripts
export PATH=$PATH:$HOME/.local/bin

# INFO: zsh
[ -s /usr/share/oh-my-zsh/ ] && ZSH=/usr/share/oh-my-zsh/
[ -s $HOME/.oh-my-zsh/ ] && ZSH=$HOME/.oh-my-zsh/
VI_MODE_RESET_PROMPT_ON_MODE_CHANGE=true
VI_MODE_SET_CURSOR=true
plugins=(git docker docker-compose vi-mode)
ZSH_CACHE_DIR=$HOME/.cache/oh-my-zsh
if [[ ! -d $ZSH_CACHE_DIR ]]; then
  mkdir $ZSH_CACHE_DIR
fi

# INFO: source
[ -s "$ZSH/oh-my-zsh.sh" ] && source $ZSH/oh-my-zsh.sh
[ -s /opt/homebrew/opt/powerlevel10k/share/powerlevel10k/powerlevel10k.zsh-theme ] && source /opt/homebrew/opt/powerlevel10k/share/powerlevel10k/powerlevel10k.zsh-theme
[ -s /opt/homebrew/opt/zsh-autosuggestions/share/zsh-autosuggestions/zsh-autosuggestions.zsh ] && source /opt/homebrew/opt/zsh-autosuggestions/share/zsh-autosuggestions/zsh-autosuggestions.zsh
[ -s /opt/homebrew/opt/zsh-syntax-highlighting/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh ] && source /opt/homebrew/opt/zsh-syntax-highlighting/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh 
[ -s "/usr/share/zsh-theme-powerlevel10k/powerlevel10k.zsh-theme" ] && source "/usr/share/zsh-theme-powerlevel10k/powerlevel10k.zsh-theme"
[ -s "/usr/share/zsh/plugins/zsh-autosuggestions/zsh-autosuggestions.zsh" ] && source "/usr/share/zsh/plugins/zsh-autosuggestions/zsh-autosuggestions.zsh"
[ -s "/usr/share/zsh/plugins/zsh-history-substring-search/zsh-history-substring-search.zsh" ] && source "/usr/share/zsh/plugins/zsh-history-substring-search/zsh-history-substring-search.zsh" 
[ -s "/usr/share/zsh/plugins/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh" ] && source "/usr/share/zsh/plugins/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh"
[ -s "$HOME/.cache/p10k-instant-prompt-${(%):-%n}.zsh" ] && source "$HOME/.cache/p10k-instant-prompt-${(%):-%n}.zsh"
[ -s "$HOME/.p10k.zsh" ] && source ~/.p10k.zsh
[ -s "$HOME/.fzf.zsh" ] && source ~/.fzf.zsh
[ -s "$HOME/tyl/google-identity/google-cloud-sdk/completion.zsh.inc" ] && source "$HOME/tyl/google-identity/google-cloud-sdk/completion.zsh.inc"
[ -s "$HOME/tyl/google-identity/google-cloud-sdk/path.zsh.inc" ] && source "$HOME/tyl/google-identity/google-cloud-sdk/path.zsh.inc"
[ -s /opt/homebrew/opt/nvm/nvm.sh ] && source /opt/homebrew/opt/nvm/nvm.sh
[ -s "/usr/share/nvm/init-nvm.sh" ] && source "/usr/share/nvm/init-nvm.sh"
[ -s "$HOME/.config/zsh/secrets.sh" ] && source $HOME/.config/zsh/secrets.sh

function gemini() {
    local prompt="$1"
    shift
    curl -s "https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-pro-preview-05-06:generateContent?key=${AI_GEMINI}" \
    -H 'Content-Type: application/json' \
    -X POST \
    -d  "{
      \"contents\": [
        {\"parts\": [{\"text\": \"$prompt\"}]}
      ]
    }" | jq -r ".candidates[0].content.parts[0].text" $@
}
